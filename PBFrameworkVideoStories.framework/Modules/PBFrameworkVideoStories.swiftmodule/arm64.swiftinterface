// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PBFrameworkVideoStories
import AVFoundation
import AVKit
import AssetsLibrary
import CoreData
import CoreGraphics
import CoreImage
import CoreMedia
import Foundation
import ImageIO
import Messages
import Metal
import MobileCoreServices
import PBFrameworkAnalytics
import PBFrameworkAnimation
import PBFrameworkServices
import PBFrameworkUILibraries
@_exported import PBFrameworkVideoStories
import PBVideoEngine
import Photos
import SSZipArchive
import Social
import Swift
import TOCropViewController
import UIKit
import WebKit
import _Concurrency
public struct FilePath {
}
@_inheritsConvenienceInitializers @objc public class PBPhotoService : ObjectiveC.NSObject {
  public static let shared: PBFrameworkVideoStories.PBPhotoService
  public var theme: PBFrameworkVideoStories.Theme?
  public class func isReadyForShowing() -> Swift.Bool
  @objc public class func setupTempJSONs(theme: PBFrameworkVideoStories.Theme, completion: (() -> ())?)
  public class func imageIsReadyForShowing(imageName: Swift.String, themeName: Swift.String) -> Swift.Bool
  public class func resetForNewTheme()
  public class func moveNewThemeFilesToLocal(theme: PBFrameworkVideoStories.Theme, json: [Swift.String : Any], isNative: Swift.Bool, version: Swift.String)
  public class func moveUserImagesToLocal(images: [[Swift.String : Any]], themeName: Swift.String)
  public class func getThemeJSONPathURL(theme: PBFrameworkVideoStories.Theme) -> Foundation.URL?
  public class func getThemeDocumentsSubDirectoryPathURL(theme: PBFrameworkVideoStories.Theme) -> Foundation.URL?
  public func deleteAllThemes(except: [PBFrameworkVideoStories.Theme], completion: (() -> ())?)
  public class func delete(theme: PBFrameworkVideoStories.Theme) -> Swift.Error?
  public class func createJSONForImageAdjust(path: Swift.String, photoName: Swift.String, frame: Swift.Int, imagesToReplace: [[Swift.String : Any]]) -> Swift.String?
  public class func tempJSONPath(path: Swift.String, imageName: Swift.String, frame: Swift.Int) -> Swift.String
  public class func copyJustWebFiles(theme: [Swift.String : Any], filesToCopy: [[Swift.String : Any]], soundName: Swift.String) -> PBFrameworkVideoStories.FilePath
  public class func setupWebView(theme: [Swift.String : Any], filesToCopy: [[Swift.String : Any]], images: [[Swift.String : Any]], soundName: Swift.String) -> PBFrameworkVideoStories.FilePath
  public class func setup(theme: [Swift.String : Any], images: [[Swift.String : Any]], isNative: Swift.Bool) -> Foundation.URL?
  public class func backgroundSoundURL(themeName: Swift.String) -> Foundation.URL?
  public class func generateFramesURL(themeName: Swift.String) -> Foundation.URL?
  public class func replaceImagesInTheme(images: [Swift.Dictionary<Swift.String, Any>]?, themeFilePathURL: Foundation.URL)
  @objc public class func themeJSONPath(name: Swift.String) -> Foundation.URL?
  @objc public class func indexHtmlURL(by name: Swift.String) -> Foundation.URL?
  @objc public class func audioFileURL(by name: Swift.String, fileName: Swift.String) -> Foundation.URL?
  @objc public class func themeDirectoryPath(by name: Swift.String) -> Foundation.URL?
  public class func replaceImageInTheme(imageDictionary: Swift.Dictionary<Swift.String, Any>, themeFilePathURL: Foundation.URL)
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIImage {
  public var brightness: Swift.Double {
    get
  }
  @objc dynamic public func aspectFittedToSize(size: CoreGraphics.CGSize) -> UIKit.UIImage?
  @objc dynamic public func aspectFittedToSizeCentered(size: CoreGraphics.CGSize) -> UIKit.UIImage?
  public func aspectFilledToSize(newSize: CoreGraphics.CGSize) -> UIKit.UIImage
  public func aspectFittedToHeight(newSize: CoreGraphics.CGSize) -> UIKit.UIImage
  public class func image(color: UIKit.UIColor, rectToDraw: CoreGraphics.CGRect) -> UIKit.UIImage
  public func resize(to size: CoreGraphics.CGSize) -> UIKit.UIImage?
  public func addShadow(blurSize: CoreGraphics.CGFloat = 6.0) -> UIKit.UIImage
  convenience public init?(color: UIKit.UIColor, size: CoreGraphics.CGSize = CGSize(width: 1, height: 1))
  public func image(byDrawingImage image: UIKit.UIImage, inRect rect: CoreGraphics.CGRect) -> UIKit.UIImage!
}
extension UIKit.UIWindow {
  @_Concurrency.MainActor(unsafe) public func capture() -> UIKit.UIImage?
}
extension Swift.String {
  public func isVersion(equalTo targetVersion: Swift.String) -> Swift.Bool
  public func isVersion(greaterThan targetVersion: Swift.String) -> Swift.Bool
  public func isVersion(greaterThanOrEqualTo targetVersion: Swift.String) -> Swift.Bool
  public func isVersion(lessThan targetVersion: Swift.String) -> Swift.Bool
  public func isVersion(lessThanOrEqualTo targetVersion: Swift.String) -> Swift.Bool
}
extension Swift.String {
  public static func validate(email: Swift.String?) -> Swift.Bool
}
@objc public protocol PBAdjustImageDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didAdjust(images: [UIKit.UIImage], controller: PBFrameworkVideoStories.PBAdjustContainerViewController)
  @objc func didEdited(image: UIKit.UIImage, position: Swift.Int, controller: PBFrameworkVideoStories.PBAdjustContainerViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PBAdjustContainerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: PBFrameworkVideoStories.PBAdjustImageDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum PBVideoStoriesError : Swift.Error {
  case pbAnimationNotInstanciated
  case pbNoThemeIdProvided
  case pbBlankThemeIdProvided
  case pbNoSuchTheme
  case pbLessThenRequiredImages
  case pbMoreThenRequiredImages
  case pbImagesDirectoryFailure
  case pbIndexOutOfBounds
  case pbThemeNotLoaded
  case pbThemeIsLoading
  case pbThemeFieldMissing
  case pbMissingClientKey
  case pbMissingClientId
  case pbMissingClientName
  case pbMissingVersion
  case pbUnknownError
  public static func == (a: PBFrameworkVideoStories.PBVideoStoriesError, b: PBFrameworkVideoStories.PBVideoStoriesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PBFrameworkVideoStories.PBVideoStoriesError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension CoreGraphics.CGRect {
  public init(center: CoreGraphics.CGPoint, size: CoreGraphics.CGSize)
}
extension CoreGraphics.CGSize {
  public init(side: CoreGraphics.CGFloat)
}
public enum PBThemeDownloadStatus {
  case downloaded
  case pending
  public static func == (a: PBFrameworkVideoStories.PBThemeDownloadStatus, b: PBFrameworkVideoStories.PBThemeDownloadStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PBPodVideoStories : ObjectiveC.NSObject {
  public class var isUsingAppGroup: Swift.Bool {
    get
    set
  }
  public class var appGroup: Swift.String {
    get
  }
  public class var groupURL: Foundation.URL? {
    get
  }
  public class var groupUserDefaults: Foundation.UserDefaults {
    get
  }
  public class func initWithServer(success: (() -> ())?, failure: @escaping (_ error: Swift.Error?) -> Swift.Void?)
  public class func set(clientId: Swift.String, clientKey: Swift.String, clientName: Swift.String)
  public class func set(authHeader: Swift.String)
  public class var clientId: Swift.String {
    get
  }
  public class var clientKey: Swift.String {
    get
  }
  public class var clientName: Swift.String {
    get
  }
  public class var token: Swift.String {
    get
  }
  public class var email: Swift.String {
    get
  }
  public class func send(email: Swift.String, success: (() -> ())?, failure: @escaping (_ error: Swift.Error?) -> Swift.Void?)
  public class func verify(email: Swift.String, code: Swift.String, success: @escaping (_ meta: [[Swift.String : Any]]?) -> Swift.Void?, failure: @escaping (_ error: Swift.Error?) -> Swift.Void?)
  public class func logout()
  public class func themes() -> [PBFrameworkVideoStories.Theme]
  public class func isThemeDownloaded(themeId: Swift.String, failure: ((_ error: Swift.Error?) -> Swift.Void)?) -> Swift.Bool
  public class func downloadTheme(by themeId: Swift.String, progress: ((_ progress: Swift.Float) -> Swift.Void)?, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public class func downloadTheme(url: Swift.String, downloadThemeId: Swift.String? = nil, themeTitle: Swift.String? = nil, version: Swift.String? = nil, progress: ((_ current: Swift.Float, _ total: Swift.Float) -> Swift.Void)?, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public class func loadThemeFromBundle(filename: Swift.String, bundle: Foundation.Bundle, progress: ((_ progress: Swift.Float) -> Swift.Void)?, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public class func setTheme(themeId: Swift.String, isVisible: Swift.Bool, success: (() -> Swift.Void)?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public class func deleteTheme(themeId: Swift.String, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public class func deleteCategories(categoryNameList: [Swift.String])
  public class func loadPendingThemesIfNeeded(progress: ((_ progress: Swift.Float) -> Swift.Void)?, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public class func pendingThemesCount() -> Swift.Int
  public var theme: PBFrameworkVideoStories.Theme? {
    get
  }
  public init(themeId: Swift.String, success: ((PBFrameworkVideoStories.PBPodVideoStories) -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public func dismantle()
  public func getAnimationView(success: ((PBFrameworkVideoStories.PBAnimationView) -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public func getAnimationViewForPlaying(success: ((PBFrameworkVideoStories.PBAnimationView) -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public func getImagePickerController(photosCount: Swift.Int, success: ((_ selectionVC: PBFrameworkVideoStories.PBImageSelectionListController) -> Swift.Void)?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public func getImagePickerController(success: ((_ selectionVC: PBFrameworkVideoStories.PBImageSelectionListController) -> Swift.Void)?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public func getAdjustImagesController(images: [UIKit.UIImage]) -> PBFrameworkVideoStories.PBAdjustContainerViewController?
  public func getAdjustSingleImageController(image: UIKit.UIImage, position: Swift.Int) -> PBFrameworkVideoStories.PBAdjustContainerViewController?
  public func saveImagesLocally(images: [UIKit.UIImage], success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public func save(image: UIKit.UIImage, index: Swift.Int, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public func createVideoStory(quality: PBFrameworkVideoStories.PBVideoQuality, progress: ((_ progress: Swift.Float) -> Swift.Void)?, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public class func migrateDataIfNeeded()
  public class func migrateUserDefaults()
  public class func migrateDataToSharedContainer()
  public func saveVideoStoryToCameraRoll(quality: PBFrameworkVideoStories.PBVideoQuality, progress: ((_ progress: Swift.Float) -> Swift.Void)?, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public func clearUsedVideoStoryParts()
  public func stopProcessingVideoStories()
  public func playAudio(theme: PBFrameworkVideoStories.Theme)
  public func stopAudio()
  @objc deinit
}
extension PBFrameworkVideoStories.PBPodVideoStories : PBFrameworkVideoStories.PBAdjustImageDelegate {
  @objc dynamic public func didEdited(image: UIKit.UIImage, position: Swift.Int, controller: PBFrameworkVideoStories.PBAdjustContainerViewController)
  @objc dynamic public func didAdjust(images: [UIKit.UIImage], controller: PBFrameworkVideoStories.PBAdjustContainerViewController)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PBAnimationView : PBFrameworkVideoStories.BaseLoadingFromXIBView {
  @_Concurrency.MainActor(unsafe) public var autoplay: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func removeFromSuperview()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) public func reloadImages()
  @_Concurrency.MainActor(unsafe) public func setControls(hidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func setAlwaysShowControls(show: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func play()
  @_Concurrency.MainActor(unsafe) public func pause()
  @_Concurrency.MainActor(unsafe) public func stop()
  @_Concurrency.MainActor(unsafe) public func setVolume(_ volume: Swift.Float)
  @_Concurrency.MainActor(unsafe) public func mute()
  @_Concurrency.MainActor(unsafe) public func unMute()
  @_Concurrency.MainActor(unsafe) public func goToFrame(_ frame: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func goToTime(_ seconds: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func totalFrames() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func totalTime() -> Swift.Double
}
extension UIKit.UIImageView {
  @objc override dynamic open func awakeFromNib()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class PBSpinnerLoadingImageView : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func baseInit()
  @_Concurrency.MainActor(unsafe) public func reset()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PBThemeDetailsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var theme: PBFrameworkVideoStories.Theme!
  @_Concurrency.MainActor(unsafe) public var stream: [Swift.String : Any]?
  @objc @_Concurrency.MainActor(unsafe) public static func create(with theme: PBFrameworkVideoStories.Theme, themeFilePathURL: Foundation.URL? = nil, dataJSONFilePathURL: Foundation.URL? = nil, audioFilePathURL: Foundation.URL? = nil, indexHTMLFilePathURL: Foundation.URL? = nil) -> PBFrameworkVideoStories.PBThemeDetailsViewController
  @objc @_Concurrency.MainActor(unsafe) public func assignStream(stream: [Swift.String : Any])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PBFrameworkVideoStories.PBThemeDetailsViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension PBFrameworkVideoStories.PBThemeDetailsViewController : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
extension PBFrameworkVideoStories.PBThemeDetailsViewController : PBFrameworkVideoStories.PBImageSelectionDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didSelect(images: [UIKit.UIImage], picker: PBFrameworkVideoStories.PBImageSelectionListController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func didCancel(picker: PBFrameworkVideoStories.PBImageSelectionListController)
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.0, *)
public class CDManager : ObjectiveC.NSObject {
  @objc public static let shared: PBFrameworkVideoStories.CDManager
  @objc public static let uncategorizedTagName: Swift.String
  @objc public var isUsingAppGroup: Swift.Bool
  public func fetchThemes(isVisible: Swift.Bool, in context: CoreData.NSManagedObjectContext? = nil) -> [PBFrameworkVideoStories.Theme]
  public func fetchModularThemes(isVisible: Swift.Bool, in context: CoreData.NSManagedObjectContext? = nil) -> [PBFrameworkVideoStories.ModularTheme]
  @objc public func fetchAllModularThemes(in context: CoreData.NSManagedObjectContext? = nil, predicate: Foundation.NSPredicate? = nil) -> [PBFrameworkVideoStories.ModularTheme]
  @objc public func fetchAllThemes(in context: CoreData.NSManagedObjectContext? = nil, predicate: Foundation.NSPredicate? = nil) -> [PBFrameworkVideoStories.Theme]
  @objc public func fetchModularTheme(byUUID uuid: Swift.String, in context: CoreData.NSManagedObjectContext? = nil, failure: ((_ error: Swift.Error?) -> Swift.Void)? = nil) -> PBFrameworkVideoStories.ModularTheme?
  @objc public func fetchTheme(byUUID uuid: Swift.String, in context: CoreData.NSManagedObjectContext? = nil, failure: ((_ error: Swift.Error?) -> Swift.Void)? = nil) -> PBFrameworkVideoStories.Theme?
  @objc public func fetchTheme(byID id: Swift.String, in context: CoreData.NSManagedObjectContext? = nil, failure: ((_ error: Swift.Error?) -> Swift.Void)? = nil) -> PBFrameworkVideoStories.Theme?
  @objc public func fetchTheme(byAssetLocationURL assetLocationURL: Swift.String, in context: CoreData.NSManagedObjectContext? = nil) -> PBFrameworkVideoStories.Theme?
  @objc public func fetchAllTags(includeUncategorized: Swift.Bool, in context: CoreData.NSManagedObjectContext? = nil, predicate: Foundation.NSPredicate? = nil) -> [PBFrameworkVideoStories.Tag]
  @objc public func fetchAllTags(in context: CoreData.NSManagedObjectContext? = nil, predicate: Foundation.NSPredicate? = nil) -> [PBFrameworkVideoStories.Tag]
  @objc public func fetchThemeCountForTag(by name: Swift.String, context: CoreData.NSManagedObjectContext? = nil) -> Swift.Int
  @objc public func fetchUntaggedThemes(context: CoreData.NSManagedObjectContext? = nil) -> [PBFrameworkVideoStories.Theme]
  @objc public func addTagToTheme(by tagName: Swift.String, themeUUID: Swift.String, context: CoreData.NSManagedObjectContext? = nil)
  @objc public func createTag(with tagName: Swift.String, context: CoreData.NSManagedObjectContext? = nil)
  @objc public func removeTagFromTheme(by tagName: Swift.String, themeUUID: Swift.String, context: CoreData.NSManagedObjectContext? = nil)
  @objc public func fetchTag(by name: Swift.String, in context: CoreData.NSManagedObjectContext? = nil) -> PBFrameworkVideoStories.Tag?
  public func deleteEmptyTags(in context: CoreData.NSManagedObjectContext? = nil)
  @objc public func delete(tag: CoreData.NSManagedObject, in context: CoreData.NSManagedObjectContext? = nil) -> Swift.Error?
  @objc public func save(context: CoreData.NSManagedObjectContext? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Application {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AdjustAndPlay : UIKit.UIViewController, Foundation.FileManagerDelegate {
  @_Concurrency.MainActor(unsafe) public var shareClosure: ((Foundation.URL) -> ())?
  @_Concurrency.MainActor(unsafe) public var sendClosure: ((Foundation.URL) -> ())?
  @_Concurrency.MainActor(unsafe) public var dismissClosure: (() -> ())?
  @_Concurrency.MainActor(unsafe) public var theme: PBFrameworkVideoStories.Theme!
  @_Concurrency.MainActor(unsafe) final public let shouldUseUnityScrolling: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isUnityTheme: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var touchViewIsEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public static func create(with theme: PBFrameworkVideoStories.Theme, themeFilePathURL: Foundation.URL? = nil, dataJSONFilePathURL: Foundation.URL? = nil, audioFilePathURL: Foundation.URL? = nil, indexHTMLFilePathURL: Foundation.URL? = nil) -> PBFrameworkVideoStories.AdjustAndPlay
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public static func create(with themeId: Swift.String, assets: [Photos.PHAsset]?) -> PBFrameworkVideoStories.AdjustAndPlay?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func setPreviousScreenImage(img: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func closeFromExternal()
  @_Concurrency.MainActor(unsafe) public func dismissImageSelection()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor(unsafe) public func viewDidRotate()
  @_Concurrency.MainActor(unsafe) public func updateNextPreviousNavButtonsForEdit()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func getPixelColor(image: UIKit.UIImage, pos: CoreGraphics.CGPoint) -> UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public func saveVideosInBackground()
  @_Concurrency.MainActor(unsafe) public func resetSavedVideos()
  @_Concurrency.MainActor(unsafe) public func stopVideoGeneration()
  @_Concurrency.MainActor(unsafe) public func getCurrentSelectedAsset() -> Photos.PHAsset?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PBFrameworkVideoStories.AdjustAndPlay : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
extension PBFrameworkVideoStories.AdjustAndPlay : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath, hideNextButton: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MessagesViewController : Messages.MSMessagesAppViewController {
  @_Concurrency.MainActor(unsafe) weak public var parentMessageVC: Messages.MSMessagesAppViewController?
  @_Concurrency.MainActor(unsafe) weak public var selectedConversation: Messages.MSConversation?
  @_Concurrency.MainActor(unsafe) public var templatesDataSource: PBFrameworkVideoStories.TemplatesDataSource!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func requestPresentationStyle(_ presentationStyle: Messages.MSMessagesAppPresentationStyle)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willTransition(to presentationStyle: Messages.MSMessagesAppPresentationStyle)
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PBFrameworkVideoStories.MessagesViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
}
extension PBFrameworkVideoStories.MessagesViewController : PBFrameworkVideoStories.ScannerViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func qrScanned(urlString: Swift.String)
  @_Concurrency.MainActor(unsafe) public func qrCanceled()
}
extension PBFrameworkVideoStories.MessagesViewController : PBFrameworkVideoStories.TemplatesDataSourceDelegate {
  @_Concurrency.MainActor(unsafe) public func selectedCategoryChanged(to name: Swift.String)
  @_Concurrency.MainActor(unsafe) public func show(template: [Swift.String : Any], at indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public func didScrollTemplates()
  @_Concurrency.MainActor(unsafe) public func updateGroupContainer(isHidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func updateGroupContainerOnPresentationStyle()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseLoadingFromXIBView : UIKit.UIView {
  @objc deinit
}
extension PBFrameworkVideoStories.Theme {
  public func mixProperties() -> [Swift.String : Swift.String]
  public func pathComponent() -> Swift.String?
  public func copy(context: CoreData.NSManagedObjectContext) -> PBFrameworkVideoStories.Theme
}
extension PBFrameworkVideoStories.ModularTheme {
  public func mixProperties() -> [Swift.String : Swift.String]
  public func themesObjs() -> [PBFrameworkVideoStories.Theme]
}
extension PBFrameworkVideoStories.Tag {
  public func copy(context: CoreData.NSManagedObjectContext) -> PBFrameworkVideoStories.Tag
}
@available(iOS 10.0, *)
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func pbRemoveAllConstraints()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ARExperience : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var isLoading: Swift.Bool {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) public static func create() -> PBFrameworkVideoStories.ARExperience
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PBThemeManager {
  public static let shared: PBFrameworkVideoStories.PBThemeManager
  public var loadedJsons: [PBFrameworkVideoStories.Theme]
  public var loadedModular: [PBFrameworkVideoStories.ModularTheme]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PBBibService : ObjectiveC.NSObject {
  @objc public var pThreshold: Swift.Double
  @objc public var pLowerThreshold: Swift.Double
  @objc public var urlString: Swift.String?
  @objc override dynamic public init()
  public init(urlString: Swift.String)
  @objc public func getRaceMeta(raceMetaLoaded: ((Swift.Bool, Any?) -> ())? = nil)
  @objc public func searchPhotos(bib: Swift.String, completion: (([[Swift.String : Any]]) -> ())?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PBDefaultsService : ObjectiveC.NSObject {
  @objc public class var buildType: PBFrameworkVideoStories.PBEnvironment {
    @objc get
    @objc set
  }
  public class func unfinishedTaskExistsForQuality(quality: Swift.String) -> Swift.Bool
  public class func unfinishedTaskSetExistsForQuality(quality: Swift.String, exists: Swift.Bool)
  public class func unfinishedTaskLastFrameForQuality(quality: Swift.String) -> Swift.Int?
  public class func unfinishedTaskSetLastFrameForQuality(quality: Swift.String, frame: Swift.Int)
  public class func clearFinishedTaskVideoFiles()
  public class func clearUnfinishedTasks()
  public class func startedLoading(url: Swift.String)
  public class func didFinishLoading(url: Swift.String)
  public class var failedURLs: [Swift.String] {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol PBVideoStoryViewDelegate : AnyObject {
  func reloadThemeInfo()
  func playAudioButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, theme: PBFrameworkVideoStories.Theme?)
  func selectPhotosButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, theme: PBFrameworkVideoStories.Theme?)
  func selectPhotosButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, modularTheme: PBFrameworkVideoStories.ModularTheme?)
  func selectPhotosButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, category: [Swift.String : Any]?)
  func selectPhotosButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, categoryTheme: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PBVideoStoryView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak public var delegate: PBFrameworkVideoStories.PBVideoStoryViewDelegate?
  @_Concurrency.MainActor(unsafe) public var isThemeDetailsViewShown: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func shouldShowThemeDetailsView(show: Swift.Bool, animated: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public static func create(with frame: CoreGraphics.CGRect, theme: PBFrameworkVideoStories.Theme) -> PBFrameworkVideoStories.PBVideoStoryView?
  @objc @_Concurrency.MainActor(unsafe) public static func create(with frame: CoreGraphics.CGRect, category: [Swift.String : Any]) -> PBFrameworkVideoStories.PBVideoStoryView?
  @objc @_Concurrency.MainActor(unsafe) public static func create(with frame: CoreGraphics.CGRect, categoryTheme: [Swift.String : Any]) -> PBFrameworkVideoStories.PBVideoStoryView?
  @objc @_Concurrency.MainActor(unsafe) public static func create(with frame: CoreGraphics.CGRect, modularTheme: PBFrameworkVideoStories.ModularTheme) -> PBFrameworkVideoStories.PBVideoStoryView?
  @objc @_Concurrency.MainActor(unsafe) public static func createFailedDownload(with frame: CoreGraphics.CGRect) -> PBFrameworkVideoStories.PBVideoStoryView?
  @objc @_Concurrency.MainActor(unsafe) public static func createUnloadedView(with frame: CoreGraphics.CGRect, coverURL: Swift.String) -> PBFrameworkVideoStories.PBVideoStoryView?
  @objc @_Concurrency.MainActor(unsafe) public static func createComingSoonView(with frame: CoreGraphics.CGRect, image: UIKit.UIImage) -> PBFrameworkVideoStories.PBVideoStoryView?
  @objc @_Concurrency.MainActor(unsafe) public static var widthView: CoreGraphics.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) public func update(categoryTheme: [Swift.String : Any])
  @_Concurrency.MainActor(unsafe) public func update(category: [Swift.String : Any])
  @_Concurrency.MainActor(unsafe) public func update(with theme: PBFrameworkVideoStories.Theme)
  @_Concurrency.MainActor(unsafe) public func update(with modularTheme: PBFrameworkVideoStories.ModularTheme)
  @_Concurrency.MainActor(unsafe) public func updateFailedDownload(url: Swift.String)
  @_Concurrency.MainActor(unsafe) public func updateUnloadedTheme(coverURL: Swift.String)
  @_Concurrency.MainActor(unsafe) public func showThemeDetailsView()
  @_Concurrency.MainActor(unsafe) public func hideThemeDetailsView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PBFrameworkVideoStories.PBVideoStoryView : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension PBFrameworkVideoStories.PBVideoStoryView : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
@objc public protocol PBImageSelectionDelegate : ObjectiveC.NSObjectProtocol {
  @objc func didSelect(images: [UIKit.UIImage], picker: PBFrameworkVideoStories.PBImageSelectionListController)
  @objc func didCancel(picker: PBFrameworkVideoStories.PBImageSelectionListController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PBImageSelectionListController : UIKit.UIViewController {
  public enum PBVideoStoriesPickerSortDirection : Swift.Int, Swift.CodingKey {
    case ascending
    case descending
    public init?(rawValue: Swift.Int)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: PBFrameworkVideoStories.PBImageSelectionDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PBFrameworkVideoStories.PBImageSelectionListController : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, referenceSizeForHeaderInSection section: Swift.Int) -> CoreGraphics.CGSize
}
extension PBFrameworkVideoStories.PBImageSelectionListController : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension PBFrameworkVideoStories.PBImageSelectionListController : UIKit.UICollectionViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
}
extension PBFrameworkVideoStories.PBImageSelectionListController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@objc public enum PBEnvironment : Swift.Int {
  case prod
  case qa
  case dev
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BrandCategoryService {
  @objc deinit
}
public enum PBVideoFileName : Swift.String {
  case temp
  case unfinished
  case finishedNoAudio
  case finished
  case partVideo
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol TemplatesDataSourceDelegate : ObjectiveC.NSObjectProtocol {
  func selectedCategoryChanged(to name: Swift.String)
  func show(template: [Swift.String : Any], at indexPath: Foundation.IndexPath)
  func didScrollTemplates()
  func updateGroupContainer(isHidden: Swift.Bool)
  func updateGroupContainerOnPresentationStyle()
}
@objc @_hasMissingDesignatedInitializers public class TemplatesDataSource : ObjectiveC.NSObject {
  weak public var delegate: PBFrameworkVideoStories.TemplatesDataSourceDelegate?
  weak public var presentingViewController: UIKit.UIViewController!
  public var showTemplate: ((Swift.String) -> ())?
  public var groups: [Swift.String] {
    get
  }
  public var brandService: PBFrameworkVideoStories.BrandCategoryService!
  public var categoryService: PBFrameworkVideoStories.BrandCategoryService!
  public var selectedCategory: Swift.String! {
    get
    set
  }
  public var stringFilter: Swift.String {
    get
    set
  }
  public var downloadingIndexPath: Foundation.IndexPath?
  public func reload()
  @objc deinit
}
extension PBFrameworkVideoStories.TemplatesDataSource : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
extension PBFrameworkVideoStories.TemplatesDataSource : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @available(iOSApplicationExtension 11.0, iOS 11.0, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
}
extension PBFrameworkVideoStories.TemplatesDataSource : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PBVideoStoriesViewController : UIKit.UIViewController, PBFrameworkVideoStories.ScannerViewControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var streamID: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var streamTemplateListURL: Swift.String?
  @objc @_Concurrency.MainActor(unsafe) public var streamTemplateListFilter: [Swift.String] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public static func create() -> PBFrameworkVideoStories.PBVideoStoriesViewController
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func qrScanned(urlString: Swift.String)
  @_Concurrency.MainActor(unsafe) public func qrCanceled()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PBFrameworkVideoStories.PBVideoStoriesViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
}
extension PBFrameworkVideoStories.PBVideoStoriesViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
}
extension PBFrameworkVideoStories.PBVideoStoriesViewController : PBFrameworkUILibraries.iCarouselDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfItems(in carousel: PBFrameworkUILibraries.iCarousel) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func carousel(_ carousel: PBFrameworkUILibraries.iCarousel, viewForItemAt index: Swift.Int, reusing view: UIKit.UIView?) -> UIKit.UIView
}
extension PBFrameworkVideoStories.PBVideoStoriesViewController : PBFrameworkVideoStories.PBVideoStoryViewDelegate {
  @_Concurrency.MainActor(unsafe) public func reloadThemeInfo()
  @_Concurrency.MainActor(unsafe) public func playAudioButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, theme: PBFrameworkVideoStories.Theme?)
  @_Concurrency.MainActor(unsafe) public func selectPhotosButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, modularTheme: PBFrameworkVideoStories.ModularTheme?)
  @_Concurrency.MainActor(unsafe) public func selectPhotosButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, category: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) public func selectPhotosButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, categoryTheme: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) public func selectPhotosButtonDidTouch(pbVideoStoryView: PBFrameworkVideoStories.PBVideoStoryView, theme: PBFrameworkVideoStories.Theme?)
}
extension PBFrameworkVideoStories.PBVideoStoriesViewController : PBFrameworkUILibraries.iCarouselDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func carouselItemWidth(_ carousel: PBFrameworkUILibraries.iCarousel) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func carousel(_ carousel: PBFrameworkUILibraries.iCarousel, itemTransformForOffset offset: CoreGraphics.CGFloat, baseTransform transform: QuartzCore.CATransform3D) -> QuartzCore.CATransform3D
  @_Concurrency.MainActor(unsafe) @objc dynamic public func carouselCurrentItemIndexDidChange(_ carousel: PBFrameworkUILibraries.iCarousel)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func carousel(_ carousel: PBFrameworkUILibraries.iCarousel, valueFor option: PBFrameworkUILibraries.iCarouselOption, withDefault value: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @_Concurrency.MainActor(unsafe) @objc dynamic public func carousel(_ carousel: PBFrameworkUILibraries.iCarousel, didSelectItemAt index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func carouselDidScroll(_ carousel: PBFrameworkUILibraries.iCarousel)
}
extension PBFrameworkVideoStories.PBVideoStoriesViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
public protocol ScannerViewControllerDelegate : AnyObject {
  func qrScanned(urlString: Swift.String)
  func qrCanceled()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class ScannerViewController : UIKit.UIViewController, AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: PBFrameworkVideoStories.ScannerViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class TemplatesViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var streamID: Swift.String?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc @_Concurrency.MainActor(unsafe) public static func create() -> PBFrameworkVideoStories.TemplatesViewController
  @_Concurrency.MainActor(unsafe) @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PBFrameworkVideoStories.TemplatesViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
}
extension PBFrameworkVideoStories.TemplatesViewController : PBFrameworkVideoStories.ScannerViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public func qrScanned(urlString: Swift.String)
  @_Concurrency.MainActor(unsafe) public func qrCanceled()
}
extension PBFrameworkVideoStories.TemplatesViewController : PBFrameworkVideoStories.TemplatesDataSourceDelegate {
  @_Concurrency.MainActor(unsafe) public func selectedCategoryChanged(to name: Swift.String)
  @_Concurrency.MainActor(unsafe) public func show(template: [Swift.String : Any], at indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) public func didScrollTemplates()
  @_Concurrency.MainActor(unsafe) public func updateGroupContainer(isHidden: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func updateGroupContainerOnPresentationStyle()
}
public typealias TimePoint = CoreMedia.CMTime
public typealias ProgressHandler = (Swift.Double) -> Swift.Void
public enum RegiftError : Swift.String, Swift.Error {
  case DestinationNotFound
  case SourceFormatInvalid
  case AddFrameToDestination
  case DestinationFinalize
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Regift {
  public static func createGIFFromSource(_ sourceFileURL: Foundation.URL, destinationFileURL: Foundation.URL? = nil, frameCount: Swift.Int, delayTime: Swift.Float, loopCount: Swift.Int = 0, size: CoreGraphics.CGSize? = nil, progress: PBFrameworkVideoStories.ProgressHandler? = nil, completion: (_ result: Foundation.URL?) -> Swift.Void)
  public static func createGIFFromSource(_ sourceFileURL: Foundation.URL, destinationFileURL: Foundation.URL? = nil, startTime: Swift.Float, duration: Swift.Float, frameRate: Swift.Int, loopCount: Swift.Int = 0, size: CoreGraphics.CGSize? = nil, progress: PBFrameworkVideoStories.ProgressHandler? = nil, completion: (_ result: Foundation.URL?) -> Swift.Void)
  public static func createGIF(fromAsset asset: AVFoundation.AVAsset, destinationFileURL: Foundation.URL? = nil, startTime: Swift.Float, duration: Swift.Float, frameRate: Swift.Int, loopCount: Swift.Int = 0, completion: (_ result: Foundation.URL?) -> Swift.Void)
  public init(sourceFileURL: Foundation.URL, destinationFileURL: Foundation.URL? = nil, frameCount: Swift.Int, delayTime: Swift.Float, loopCount: Swift.Int = 0, size: CoreGraphics.CGSize? = nil, progress: PBFrameworkVideoStories.ProgressHandler? = nil)
  public init(sourceFileURL: Foundation.URL, destinationFileURL: Foundation.URL? = nil, startTime: Swift.Float, duration: Swift.Float, frameRate: Swift.Int, loopCount: Swift.Int = 0, size: CoreGraphics.CGSize? = nil, progress: PBFrameworkVideoStories.ProgressHandler? = nil)
  public init(asset: AVFoundation.AVAsset, destinationFileURL: Foundation.URL? = nil, startTime: Swift.Float, duration: Swift.Float, frameRate: Swift.Int, loopCount: Swift.Int = 0, size: CoreGraphics.CGSize? = nil, progress: PBFrameworkVideoStories.ProgressHandler? = nil)
  public func createGif() -> Foundation.URL?
  public func createGIFForTimePoints(_ timePoints: [PBFrameworkVideoStories.TimePoint], fileProperties: [Swift.String : Swift.AnyObject], frameProperties: [Swift.String : Swift.AnyObject], frameCount: Swift.Int, size: CoreGraphics.CGSize? = nil) throws -> Foundation.URL
}
@objc @_inheritsConvenienceInitializers public class PBCine : ObjectiveC.NSObject {
  public class func createMessagesInitialViewController() -> PBFrameworkVideoStories.MessagesViewController
  public class func prepareAdjustPlay(themeId: Swift.String, assets: [Photos.PHAsset]?) -> PBFrameworkVideoStories.AdjustAndPlay?
  public class func updateVidbits(code: Swift.String, completion: (() -> ())?)
  public class func downloadZip(url: Swift.String, progress: ((_ current: Swift.Float, _ total: Swift.Float) -> Swift.Void)?, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public class func getAllThemesDownloaded() -> [PBFrameworkVideoStories.Theme]
  public class func getAllThemesNotDownloaded() -> [[Swift.String : Any]]
  public class func download(themeId: Swift.String, progress: ((_ current: Swift.Float, _ total: Swift.Float) -> Swift.Void)?, success: (() -> ())?, failure: ((_ error: Swift.Error?) -> Swift.Void)?)
  public class func deleteTheme(by id: Swift.String)
  public class func installMultiple(zips: [Swift.String], bundle: Foundation.Bundle, success: (([Swift.String]) -> ())?, failure: (([Swift.String]) -> ())?)
  public class func install(zip: Swift.String, bundle: Foundation.Bundle, success: (() -> ())?, failure: ((Swift.Error?) -> ())?)
  public class func defaultThemeZips() -> [Swift.String]
  public class func filterAllowed(themes: [PBFrameworkVideoStories.Theme]) -> [PBFrameworkVideoStories.Theme]
  @objc override dynamic public init()
  @objc deinit
}
public typealias VideoStoryDownloaderSuccessBlock = (_ themeFilePathURL: Foundation.URL?, _ dataJSONFilePathURL: Foundation.URL?, _ themeJSONFilePathURL: Foundation.URL?, _ audioFilePathURL: Foundation.URL?, _ indexHTMLFilePathURL: Foundation.URL?, _ themeJSON: Swift.Dictionary<Swift.String, Any>?, _ dataFolderPathURL: Foundation.URL?, _ metaJSON: [Swift.String : Any]?) -> Swift.Void
@_inheritsConvenienceInitializers @objc public class PBVideoStoryDownloaderService : ObjectiveC.NSObject, Foundation.URLSessionDownloadDelegate, Foundation.URLSessionDelegate, Foundation.URLSessionTaskDelegate {
  public static let shared: PBFrameworkVideoStories.PBVideoStoryDownloaderService
  public var progressClosure: ((Swift.Float, Swift.Float) -> Swift.Void)?
  public var downloadFailureBlock: ((Swift.Error?) -> Swift.Void)?
  public var downloadSuccessBlockFromZIP: (PBFrameworkVideoStories.VideoStoryDownloaderSuccessBlock)?
  public var downloadSuccessBlockFromTheme: (() -> Swift.Void)?
  public var isDownloading: Swift.Bool {
    get
    set
  }
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func downloadTheme(jsonUrl: Foundation.URL, successBlock: ((PBFrameworkVideoStories.Theme) -> ())?, failureBlock: ((_ error: Swift.Error?) -> Swift.Void)?)
  public func downloadZip(zipUrl: Foundation.URL, themeObj: PBFrameworkVideoStories.Theme, successBlock: @escaping ((PBFrameworkVideoStories.Theme) -> ()), failureBlock: ((_ error: Swift.Error?) -> Swift.Void)?, progressBlock: ((_ progress: Swift.Float, _ total: Swift.Float) -> Swift.Void)?)
  @objc override dynamic public init()
  @objc deinit
}
extension PBFrameworkVideoStories.PBVideoStoryDownloaderService {
  public func testDownloadModularTheme(uuid: Swift.String, progressBlock: ((_ progress: Swift.Float, _ total: Swift.Float) -> Swift.Void)?, successBlock: (() -> ())?, failureBlock: ((_ error: Swift.Error?) -> Swift.Void)?)
  @objc dynamic public func downloadVideoStoryAndUpdateImages(videoStoryThemeURL: Foundation.URL, uuid: Swift.String, themeId: Swift.String? = nil, successBlock: (PBFrameworkVideoStories.VideoStoryDownloaderSuccessBlock)?, failureBlock: ((_ error: Swift.Error?) -> Swift.Void)?, progressBlock: ((_ progress: Swift.Float, _ total: Swift.Float) -> Swift.Void)?)
}
public struct Marker {
}
public struct ImagePositionStatus {
}
public enum CropperStatusField : Swift.String {
  case contentOffset
  case zoom
  case imageId
  case aspectRatio
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PBVideoQuality : Swift.Float {
  case q360
  case q480
  case q720
  case q1080
  public var descriptor: Swift.String {
    get
  }
  public init?(rawValue: Swift.Float)
  public typealias RawValue = Swift.Float
  public var rawValue: Swift.Float {
    get
  }
}
public class PBVideoQualityService {
  public var quality: PBFrameworkVideoStories.PBVideoQuality
  public var allQualities: [PBFrameworkVideoStories.PBVideoQuality] {
    get
  }
  public init()
  public func tempFileName(quality: PBFrameworkVideoStories.PBVideoQuality) -> Swift.String
  public func tempFileExists(quality: PBFrameworkVideoStories.PBVideoQuality) -> Swift.Bool
  public func tempFileURL(quality: PBFrameworkVideoStories.PBVideoQuality) -> Foundation.URL
  public func unfinishedFileName(quality: PBFrameworkVideoStories.PBVideoQuality) -> Swift.String
  public func unfinishedFileExists(quality: PBFrameworkVideoStories.PBVideoQuality) -> Swift.Bool
  public func unfinishedFileURL(quality: PBFrameworkVideoStories.PBVideoQuality) -> Foundation.URL
  public func finishedNoAudioFileName(quality: PBFrameworkVideoStories.PBVideoQuality) -> Swift.String
  public func finishedNoAudioFileExists(quality: PBFrameworkVideoStories.PBVideoQuality) -> Swift.Bool
  public func finishedNoAudioFileURL(quality: PBFrameworkVideoStories.PBVideoQuality) -> Foundation.URL
  public func finishedFileName(quality: PBFrameworkVideoStories.PBVideoQuality) -> Swift.String
  public func finishedFileExists(quality: PBFrameworkVideoStories.PBVideoQuality) -> Swift.Bool
  public func finishedFileURL(quality: PBFrameworkVideoStories.PBVideoQuality) -> Foundation.URL
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Filter) public class Filter : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PBFrameworkVideoStories.Filter {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PBFrameworkVideoStories.Filter>
  @objc @NSManaged dynamic public var displayOrder: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var themeAsset: PBFrameworkVideoStories.ThemeAsset? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(ModularTheme) public class ModularTheme : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PBFrameworkVideoStories.ModularTheme {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PBFrameworkVideoStories.ModularTheme>
  @objc @NSManaged dynamic public var audioTrackFileName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var audioTrackFileType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var heroURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var prerollCoverURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var saveDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uuid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var themes: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var videos: Foundation.NSOrderedSet? {
    @objc get
    @objc set
  }
}
extension PBFrameworkVideoStories.ModularTheme {
  @objc(insertObject:inThemesAtIndex:) @NSManaged dynamic public func insertIntoThemes(_ value: PBFrameworkVideoStories.Theme, at idx: Swift.Int)
  @objc(removeObjectFromThemesAtIndex:) @NSManaged dynamic public func removeFromThemes(at idx: Swift.Int)
  @objc(insertThemes:atIndexes:) @NSManaged dynamic public func insertIntoThemes(_ values: [PBFrameworkVideoStories.Theme], at indexes: Foundation.NSIndexSet)
  @objc(removeThemesAtIndexes:) @NSManaged dynamic public func removeFromThemes(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInThemesAtIndex:withObject:) @NSManaged dynamic public func replaceThemes(at idx: Swift.Int, with value: PBFrameworkVideoStories.Theme)
  @objc(replaceThemesAtIndexes:withThemes:) @NSManaged dynamic public func replaceThemes(at indexes: Foundation.NSIndexSet, with values: [PBFrameworkVideoStories.Theme])
  @objc(addThemesObject:) @NSManaged dynamic public func addToThemes(_ value: PBFrameworkVideoStories.Theme)
  @objc(removeThemesObject:) @NSManaged dynamic public func removeFromThemes(_ value: PBFrameworkVideoStories.Theme)
  @objc(addThemes:) @NSManaged dynamic public func addToThemes(_ values: Foundation.NSOrderedSet)
  @objc(removeThemes:) @NSManaged dynamic public func removeFromThemes(_ values: Foundation.NSOrderedSet)
}
extension PBFrameworkVideoStories.ModularTheme {
  @objc(insertObject:inVideosAtIndex:) @NSManaged dynamic public func insertIntoVideos(_ value: PBFrameworkVideoStories.Video, at idx: Swift.Int)
  @objc(removeObjectFromVideosAtIndex:) @NSManaged dynamic public func removeFromVideos(at idx: Swift.Int)
  @objc(insertVideos:atIndexes:) @NSManaged dynamic public func insertIntoVideos(_ values: [PBFrameworkVideoStories.Video], at indexes: Foundation.NSIndexSet)
  @objc(removeVideosAtIndexes:) @NSManaged dynamic public func removeFromVideos(at indexes: Foundation.NSIndexSet)
  @objc(replaceObjectInVideosAtIndex:withObject:) @NSManaged dynamic public func replaceVideos(at idx: Swift.Int, with value: PBFrameworkVideoStories.Video)
  @objc(replaceVideosAtIndexes:withVideos:) @NSManaged dynamic public func replaceVideos(at indexes: Foundation.NSIndexSet, with values: [PBFrameworkVideoStories.Video])
  @objc(addVideosObject:) @NSManaged dynamic public func addToVideos(_ value: PBFrameworkVideoStories.Video)
  @objc(removeVideosObject:) @NSManaged dynamic public func removeFromVideos(_ value: PBFrameworkVideoStories.Video)
  @objc(addVideos:) @NSManaged dynamic public func addToVideos(_ values: Foundation.NSOrderedSet)
  @objc(removeVideos:) @NSManaged dynamic public func removeFromVideos(_ values: Foundation.NSOrderedSet)
}
@_inheritsConvenienceInitializers @objc(Tag) public class Tag : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PBFrameworkVideoStories.Tag {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PBFrameworkVideoStories.Tag>
  @objc @NSManaged dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isExpanded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var themes: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension PBFrameworkVideoStories.Tag {
  @objc(addThemesObject:) @NSManaged dynamic public func addToThemes(_ value: PBFrameworkVideoStories.Theme)
  @objc(removeThemesObject:) @NSManaged dynamic public func removeFromThemes(_ value: PBFrameworkVideoStories.Theme)
  @objc(addThemes:) @NSManaged dynamic public func addToThemes(_ values: Foundation.NSSet)
  @objc(removeThemes:) @NSManaged dynamic public func removeFromThemes(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(Theme) public class Theme : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PBFrameworkVideoStories.Theme {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PBFrameworkVideoStories.Theme>
  @objc @NSManaged dynamic public var assetLocationURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var audioTrackFileName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var audioTrackFileType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var audioTrackTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var backgroundVideo: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var creationDate: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var currentDownloadedVersion: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var heroURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isFromZIP: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isHidden: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isNative: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isUnity: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var jsonFileName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var layeredVideo: [[Swift.String : Any]]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lengthInMS: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nm: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var photoNames: [[Swift.String : Any]]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var postrollCoverURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var prerollCoverURL: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var saveDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uuid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var webFiles: [[Swift.String : Any]]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modularTheme: PBFrameworkVideoStories.ModularTheme? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tags: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var themeAsset: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension PBFrameworkVideoStories.Theme {
  @objc(addTagsObject:) @NSManaged dynamic public func addToTags(_ value: PBFrameworkVideoStories.Tag)
  @objc(removeTagsObject:) @NSManaged dynamic public func removeFromTags(_ value: PBFrameworkVideoStories.Tag)
  @objc(addTags:) @NSManaged dynamic public func addToTags(_ values: Foundation.NSSet)
  @objc(removeTags:) @NSManaged dynamic public func removeFromTags(_ values: Foundation.NSSet)
}
extension PBFrameworkVideoStories.Theme {
  @objc(addThemeAssetObject:) @NSManaged dynamic public func addToThemeAsset(_ value: PBFrameworkVideoStories.ThemeAsset)
  @objc(removeThemeAssetObject:) @NSManaged dynamic public func removeFromThemeAsset(_ value: PBFrameworkVideoStories.ThemeAsset)
  @objc(addThemeAsset:) @NSManaged dynamic public func addToThemeAsset(_ values: Foundation.NSSet)
  @objc(removeThemeAsset:) @NSManaged dynamic public func removeFromThemeAsset(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(ThemeAsset) public class ThemeAsset : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PBFrameworkVideoStories.ThemeAsset {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PBFrameworkVideoStories.ThemeAsset>
  @objc @NSManaged dynamic public var displayOrder: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var filename: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var previewFrame: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sizeHeight: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sizeWidth: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var filter: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var theme: PBFrameworkVideoStories.Theme? {
    @objc get
    @objc set
  }
}
extension PBFrameworkVideoStories.ThemeAsset {
  @objc(addFilterObject:) @NSManaged dynamic public func addToFilter(_ value: PBFrameworkVideoStories.Filter)
  @objc(removeFilterObject:) @NSManaged dynamic public func removeFromFilter(_ value: PBFrameworkVideoStories.Filter)
  @objc(addFilter:) @NSManaged dynamic public func addToFilter(_ values: Foundation.NSSet)
  @objc(removeFilter:) @NSManaged dynamic public func removeFromFilter(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(Video) public class Video : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PBFrameworkVideoStories.Video {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PBFrameworkVideoStories.Video>
  @objc @NSManaged dynamic public var maxLength: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minLength: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modularTheme: PBFrameworkVideoStories.ModularTheme? {
    @objc get
    @objc set
  }
}
extension PBFrameworkVideoStories.PBVideoStoriesError : Swift.Equatable {}
extension PBFrameworkVideoStories.PBVideoStoriesError : Swift.Hashable {}
extension PBFrameworkVideoStories.PBThemeDownloadStatus : Swift.Equatable {}
extension PBFrameworkVideoStories.PBThemeDownloadStatus : Swift.Hashable {}
extension PBFrameworkVideoStories.PBImageSelectionListController.PBVideoStoriesPickerSortDirection : Swift.Equatable {}
extension PBFrameworkVideoStories.PBImageSelectionListController.PBVideoStoriesPickerSortDirection : Swift.Hashable {}
extension PBFrameworkVideoStories.PBImageSelectionListController.PBVideoStoriesPickerSortDirection : Swift.RawRepresentable {}
extension PBFrameworkVideoStories.PBEnvironment : Swift.Equatable {}
extension PBFrameworkVideoStories.PBEnvironment : Swift.Hashable {}
extension PBFrameworkVideoStories.PBEnvironment : Swift.RawRepresentable {}
extension PBFrameworkVideoStories.PBVideoFileName : Swift.Equatable {}
extension PBFrameworkVideoStories.PBVideoFileName : Swift.Hashable {}
extension PBFrameworkVideoStories.PBVideoFileName : Swift.RawRepresentable {}
extension PBFrameworkVideoStories.RegiftError : Swift.Equatable {}
extension PBFrameworkVideoStories.RegiftError : Swift.Hashable {}
extension PBFrameworkVideoStories.RegiftError : Swift.RawRepresentable {}
extension PBFrameworkVideoStories.CropperStatusField : Swift.Equatable {}
extension PBFrameworkVideoStories.CropperStatusField : Swift.Hashable {}
extension PBFrameworkVideoStories.CropperStatusField : Swift.RawRepresentable {}
extension PBFrameworkVideoStories.PBVideoQuality : Swift.Equatable {}
extension PBFrameworkVideoStories.PBVideoQuality : Swift.Hashable {}
extension PBFrameworkVideoStories.PBVideoQuality : Swift.RawRepresentable {}
